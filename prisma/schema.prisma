// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique @db.VarChar(50)
  email         String    @unique @db.VarChar(100)
  passwordHash  String    @map("password_hash") @db.VarChar(255)
  
  // 基本信息
  realName      String?   @db.VarChar(50)    @map("real_name")  // 真实姓名
  nickname      String?   @db.VarChar(50)    // 昵称
  phone         String?   @db.VarChar(20)    // 手机号码
  avatar        String?   @db.VarChar(255)   // 头像URL
  bio           String?   @db.Text           // 个人简介
  company       String?   @db.VarChar(100)   // 公司名称
  position      String?   @db.VarChar(50)    // 职位
  location      String?   @db.VarChar(100)   // 所在地
  website       String?   @db.VarChar(255)   // 个人网站

  // 联系方式
  wechat        String?   @db.VarChar(50)    // 微信号
  qq            String?   @db.VarChar(20)    // QQ号
  telegram      String?   @db.VarChar(50)    // Telegram
  whatsapp      String?   @db.VarChar(50)    // WhatsApp
  skype         String?   @db.VarChar(50)    // Skype
  twitter       String?   @db.VarChar(50)    // X(Twitter)

  // 偏好设置
  language      String    @default("zh-CN") @db.VarChar(10)   // 界面语言
  theme         String    @default("light") @db.VarChar(10)   // 界面主题
  timezone      String    @default("Asia/Shanghai") @db.VarChar(50) // 时区
  notification  Boolean   @default(true)     // 通知开关
  twoFactorEnabled Boolean @default(false)   @map("two_factor_enabled") // 两步验证
  
  // 时间戳
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")
  lastLoginIp   String?   @map("last_login_ip") @db.VarChar(50)

  // 关联关系
  domains         Domain[]
  categories      DomainCategory[]
  tags            DomainTag[]
  portfolios      Portfolio[]
  registrars      Registrar[]
  watchedDomains  WatchedDomain[]
  aiPrompts       AiPrompt[]
  systemSettings  SystemSetting[]
  staticPages     StaticPage[]
  
  // 统计信息
  loginCount    Int       @default(0)        // 登录次数
  domainCount   Int       @default(0)        // 域名总数
  
  // 日志和记录
  loginLogs      LoginLog[]       // 登录日志
  operationLogs  OperationLog[]   // 操作日志
  notifications  Notification[]   // 通知消息

  @@map("users")
}

// 登录日志
model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ip        String   // 登录IP
  device    String   // 设备信息
  location  String?  // 登录地点
  status    String   // 登录状态：success, failed
  createdAt DateTime @default(now())
  
  @@map("login_logs")
}

// 操作日志
model OperationLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  action    String   // 操作类型
  target    String   // 操作对象
  detail    String   // 操作详情
  ip        String   // 操作IP
  createdAt DateTime @default(now())
  
  @@map("operation_logs")
}

// 通知消息
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String   // 通知类型：system, domain, security
  title     String   // 通知标题
  content   String   // 通知内容
  read      Boolean  @default(false) // 是否已读
  createdAt DateTime @default(now())
  
  @@map("notifications")
}

// 注册商表
model Registrar {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  name       String   @db.VarChar(100)
  websiteUrl String?  @map("website_url") @db.VarChar(255)
  loginUrl   String?  @map("login_url") @db.VarChar(255)
  accountId  String?  @map("account_id") @db.VarChar(100)
  notes      String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // 关联关系
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  domains Domain[]

  @@unique([userId, name])
  @@map("registrars")
}

// 域名分类表
model DomainCategory {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  name        String   @db.VarChar(100)
  description String?  @db.Text
  sortOrder   Int      @default(0) @map("sort_order") // 排序字段，数字越小越靠前
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联关系
  user       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  domains    Domain[]
  portfolios PortfolioCategoryMap[]

  @@unique([userId, name])
  @@map("domain_categories")
}

// 域名标签表
model DomainTag {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  name      String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联关系
  user    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  domains DomainTagMap[]

  @@unique([userId, name])
  @@map("domain_tags")
}

// 域名表
model Domain {
  id                  Int      @id @default(autoincrement())
  userId              Int      @map("user_id")
  domainName          String   @map("domain_name") @db.VarChar(255)
  registrarId         Int?     @map("registrar_id")
  creationDate        DateTime? @map("creation_date") @db.Date
  expiryDate          DateTime? @map("expiry_date") @db.Date
  nameServers         String?  @map("name_servers") @db.Text
  purchasePrice       Decimal? @map("purchase_price") @db.Decimal(10, 2)
  holderInfo          String?  @map("holder_info") @db.Text
  notes               String?  @db.Text
  domainStatus        Int?     @map("domain_status") @db.TinyInt @default(1)
  salesStatus         Int?     @map("sales_status") @db.TinyInt @default(1)
  categoryId          Int?     @map("category_id")
  landingPageType     String?  @map("landing_page_type") @db.VarChar(20)
  landingPageContent  String?  @map("landing_page_content") @db.Text
  salesPrice    Decimal? @map("sales_price") @db.Decimal(10, 2) //销售价格
  
  // 新增字段 - 价格和营销相关
  discount            Decimal? @db.Decimal(10, 2)  // 折扣价格
  discountExpiry      DateTime? @map("discount_expiry")  // 折扣有效期
  priceExpiry         DateTime? @map("price_expiry")     // 价格有效期
  
  // 新增字段 - 域名描述
  domainMeaning       String?  @map("domain_meaning") @db.VarChar(100)   // 域名含义
  domainDescription   String?  @map("domain_description") @db.Text       // 域名描述
  
  // 新增字段 - 域名点击行为
  clickBehavior       String?  @map("click_behavior") @db.VarChar(20)  // 点击行为: landing(着陆页)/popup(弹窗)/external(外部链接)
  externalUrl         String?  @map("external_url") @db.VarChar(500)  // 外部链接URL
  
  seoTitle        String?  @map("seo_title") @db.VarChar(255)      // SEO标题
  seoDescription  String?  @map("seo_description") @db.Text        // SEO描述
  seoKeywords     String?  @map("seo_keywords") @db.VarChar(500)   // SEO关键词
  
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // 关联关系
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  registrar  Registrar?         @relation(fields: [registrarId], references: [id], onDelete: SetNull)
  category   DomainCategory?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags       DomainTagMap[]
  costs      DomainCost[]
  inquiries  Inquiry[]
  portfolios PortfolioDomainMap[]
  sales      DomainSale[]

  @@unique([userId, domainName])
  @@map("domains")
}

// 域名标签关联表
model DomainTagMap {
  domainId Int @map("domain_id")
  tagId    Int @map("tag_id")

  // 关联关系
  domain Domain    @relation(fields: [domainId], references: [id], onDelete: Cascade)
  tag    DomainTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([domainId, tagId])
  @@map("domain_tag_map")
}

// 域名成本表
model DomainCost {
  id           Int      @id @default(autoincrement())
  domainId     Int      @map("domain_id")
  costDate     DateTime @map("cost_date") @db.Date
  amount       Decimal  @db.Decimal(10, 2)
  costType     String   @map("cost_type") @db.VarChar(20)
  renewalYears Int?     @map("renewal_years")
  notes        String?  @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 关联关系
  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("domain_costs")
}

// 米表表
model Portfolio {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  name            String   @db.VarChar(100)
  slug            String   @db.VarChar(100)
  isDefault       Boolean  @default(false) @map("is_default")
  layoutTemplate  String   @default("list") @map("layout_template") @db.VarChar(50)
  colorTheme      String?  @map("color_theme") @db.VarChar(50)
  enableGrouping  Boolean  @default(false) @map("enable_grouping") // 是否开启分类分组
  enableWaterfall Boolean  @default(false) @map("enable_waterfall") // 是否开启瀑布流
  
  // 视觉配置
  logoUrl           String?  @map("logo_url") @db.VarChar(500)     // logo图片URL
  backgroundUrl     String?  @map("background_url") @db.VarChar(500) // 背景图片URL
  textTheme         String?  @default("auto") @map("text_theme") @db.VarChar(20) // 文字颜色主题: auto/light/dark
  backgroundOverlay Boolean  @default(false) @map("background_overlay") // 是否添加背景遮罩
  
  // 头部配置
  headerInfo      String?  @map("header_info") @db.Text
  headerPages     String?  @map("header_pages") @db.Text  // JSON格式存储选中的页面ID
  headerRichText  String?  @map("header_rich_text") @db.LongText  // 富文本内容
  
  // 尾部配置  
  footerInfo      String?  @map("footer_info") @db.Text
  footerPages     String?  @map("footer_pages") @db.Text  // JSON格式存储选中的页面ID
  footerRichText  String?  @map("footer_rich_text") @db.LongText  // 富文本内容
  
  // SEO配置
  seoTitle        String?  @map("seo_title") @db.VarChar(255)      // SEO标题
  seoDescription  String?  @map("seo_description") @db.Text        // SEO描述
  seoKeywords     String?  @map("seo_keywords") @db.VarChar(500)   // SEO关键词
  ogTitle         String?  @map("og_title") @db.VarChar(255)       // OG标题
  ogDescription   String?  @map("og_description") @db.Text         // OG描述
  ogImage         String?  @map("og_image") @db.VarChar(500)       // OG图片URL
  twitterCard     String?  @default("summary") @map("twitter_card") @db.VarChar(50) // Twitter卡片类型
  analyticsCode   String?  @map("analytics_code") @db.Text         // 统计代码(GA/百度统计等)
  
  // 域名点击行为配置
  defaultClickBehavior String? @default("popup") @map("default_click_behavior") @db.VarChar(20) // 默认点击行为: landing(着陆页)/popup(弹窗)
  
  showPrice       Boolean  @default(true) @map("show_price")
  showDescription Boolean  @default(false) @map("show_description")
  showTags        Boolean  @default(false) @map("show_tags")
  enableSearchArea Boolean @default(true) @map("enable_search_area") // 搜索区域是否默认展开
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 关联关系
  user       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories PortfolioCategoryMap[]
  domains    PortfolioDomainMap[]
  inquiries  Inquiry[]

  @@unique([userId, slug])
  @@map("portfolios")
}

// 米表分类关联表
model PortfolioCategoryMap {
  portfolioId Int @map("portfolio_id")
  categoryId  Int @map("category_id")

  // 关联关系
  portfolio Portfolio      @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  category  DomainCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([portfolioId, categoryId])
  @@map("portfolio_category_map")
}

// 米表域名关联表（保留用于特殊情况的直接关联）
model PortfolioDomainMap {
  portfolioId          Int     @map("portfolio_id")
  domainId             Int     @map("domain_id")
  displayPriceOverride Decimal? @map("display_price_override") @db.Decimal(10, 2)
  displayOrder         Int     @default(0) @map("display_order")

  // 关联关系
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  domain    Domain    @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@id([portfolioId, domainId])
  @@map("portfolio_domain_map")
}

// 线索表
model Inquiry {
  id           Int      @id @default(autoincrement())
  domainId     Int?     @map("domain_id")
  portfolioId  Int?     @map("portfolio_id")
  visitorName  String?  @map("visitor_name") @db.VarChar(100)
  visitorEmail String   @map("visitor_email") @db.VarChar(255)
  visitorPhone String?  @map("visitor_phone") @db.VarChar(50)
  offerPrice   Decimal? @map("offer_price") @db.Decimal(10, 2)
  message      String   @db.Text
  status       String   @default("new") @db.VarChar(20)
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.Text
  submittedAt  DateTime @default(now()) @map("submitted_at")

  // 关联关系
  domain    Domain?    @relation(fields: [domainId], references: [id], onDelete: SetNull)
  portfolio Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: SetNull)

  @@map("inquiries")
}

// 关注域名表
model WatchedDomain {
  id                   Int      @id @default(autoincrement())
  userId               Int      @map("user_id")
  domainName           String   @map("domain_name") @db.VarChar(255)
  lastWhoisCheck       DateTime? @map("last_whois_check")
  currentWhoisSummary  String?  @map("current_whois_summary") @db.Text
  monitoringLevel      String?  @map("monitoring_level") @db.VarChar(50)
  notes                String?  @db.Text
  notifyOnChange       Boolean  @default(true) @map("notify_on_change")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, domainName])
  @@map("watched_domains")
}

// AI 提示词表
model AiPrompt {
  id                  Int      @id @default(autoincrement())
  userId              Int      @map("user_id")
  sceneCode           String   @map("scene_code") @db.VarChar(100)
  sceneName           String   @map("scene_name") @db.VarChar(200)
  systemPromptDefault String   @map("system_prompt_default") @db.Text
  userPromptCustom    String?  @map("user_prompt_custom") @db.Text
  modelPreference     String?  @map("model_preference") @db.VarChar(100)
  enabled             Boolean  @default(true)
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sceneCode])
  @@map("ai_prompts")
}

// 域名销售记录表
model DomainSale {
  id              Int      @id @default(autoincrement())
  domainId        Int      @map("domain_id")
  buyerName       String?  @map("buyer_name") @db.VarChar(100)
  buyerEmail      String?  @map("buyer_email") @db.VarChar(255)
  buyerPhone      String?  @map("buyer_phone") @db.VarChar(50)
  buyerCompany    String?  @map("buyer_company") @db.VarChar(200)
  salePrice       Decimal  @map("sale_price") @db.Decimal(10, 2)
  saleCurrency    String   @default("CNY") @map("sale_currency") @db.VarChar(10)
  saleDate        DateTime @map("sale_date") @db.Date
  paymentMethod   String?  @map("payment_method") @db.VarChar(50)
  paymentStatus   String   @default("pending") @map("payment_status") @db.VarChar(20)
  transferStatus  String   @default("pending") @map("transfer_status") @db.VarChar(20)
  platformFee     Decimal? @map("platform_fee") @db.Decimal(10, 2)
  platformName    String?  @map("platform_name") @db.VarChar(100)
  contractFile    String?  @map("contract_file") @db.VarChar(255)
  notes           String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 关联关系
  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("domain_sales")
}

// 系统设置表
model SystemSetting {
  settingKey   String @id @map("setting_key") @db.VarChar(100)
  settingValue String @map("setting_value") @db.Text
  userId       Int?   @map("user_id")

  // 关联关系
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("system_settings")
}

// 静态页面表
model StaticPage {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  title           String   @db.VarChar(255)
  slug            String?  @db.VarChar(255)  // 外部链接时可为空
  content         String?  @db.LongText      // 外部链接时可为空
  externalUrl     String?  @map("external_url") @db.VarChar(500)  // 外部链接URL
  linkType        String   @default("internal") @map("link_type") @db.VarChar(20)  // internal/external
  openInNewTab    Boolean  @default(false) @map("open_in_new_tab")  // 是否新窗口打开
  metaTitle       String?  @map("meta_title") @db.VarChar(255)
  metaDescription String?  @map("meta_description") @db.Text
  status          String   @default("published") @db.VarChar(20)
  sortOrder       Int      @default(0) @map("sort_order")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("static_pages")
} 